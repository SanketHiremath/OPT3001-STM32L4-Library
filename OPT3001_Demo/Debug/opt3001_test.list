
opt3001_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004190  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004380  08004380  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004380  08004380  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000078  08004400  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08004400  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b71a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001926  00000000  00000000  0002b7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  0002da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259fd  00000000  00000000  0002e300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008491  00000000  00000000  00053cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e42d0  00000000  00000000  0005c18e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014045e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002888  00000000  00000000  001404dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004300 	.word	0x08004300

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08004300 	.word	0x08004300

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fb42 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f826 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f8da 	bl	8000bc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a14:	f000 f898 	bl	8000b48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  opt3001_init();                                 //Initialize the sensor
 8000a18:	f000 f99c 	bl	8000d54 <opt3001_init>

  HAL_Delay(50);
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f000 fbaf 	bl	8001180 <HAL_Delay>
  device=read_devid();                            //Read the device id
 8000a22:	f000 fa0f 	bl	8000e44 <read_devid>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <main+0x4c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  manu=read_manufacturer_id();                    //Read the manufacturer id
 8000a2e:	f000 fa21 	bl	8000e74 <read_manufacturer_id>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <main+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
     data= calculate_lux();                      //get the ambient light level value from the sensor(in Lux)
 8000a3a:	f000 f9b1 	bl	8000da0 <calculate_lux>
 8000a3e:	eef0 7a40 	vmov.f32	s15, s0
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <main+0x54>)
 8000a44:	edc3 7a00 	vstr	s15, [r3]
     HAL_Delay(50);
 8000a48:	2032      	movs	r0, #50	; 0x32
 8000a4a:	f000 fb99 	bl	8001180 <HAL_Delay>
     data= calculate_lux();                      //get the ambient light level value from the sensor(in Lux)
 8000a4e:	e7f4      	b.n	8000a3a <main+0x36>
 8000a50:	200000e8 	.word	0x200000e8
 8000a54:	200000e0 	.word	0x200000e0
 8000a58:	200000e4 	.word	0x200000e4

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0b8      	sub	sp, #224	; 0xe0
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a66:	2244      	movs	r2, #68	; 0x44
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 ff3a 	bl	80038e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2288      	movs	r2, #136	; 0x88
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 ff2c 	bl	80038e4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fc7c 	bl	80023cc <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ada:	f000 f8ed 	bl	8000cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000afc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b00:	2104      	movs	r1, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 f848 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b0e:	f000 f8d3 	bl	8000cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b12:	2340      	movs	r3, #64	; 0x40
 8000b14:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fa07 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b28:	f000 f8c6 	bl	8000cb8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b30:	f001 fbf6 	bl	8002320 <HAL_PWREx_ControlVoltageScaling>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000b3a:	f000 f8bd 	bl	8000cb8 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	37e0      	adds	r7, #224	; 0xe0
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_I2C1_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b54:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <MX_I2C1_Init+0x7c>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b82:	480e      	ldr	r0, [pc, #56]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b84:	f000 fdc4 	bl	8001710 <HAL_I2C_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8e:	f000 f893 	bl	8000cb8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b96:	f001 fb1d 	bl	80021d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f000 f88a 	bl	8000cb8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000ba8:	f001 fb5f 	bl	800226a <HAL_I2CEx_ConfigDigitalFilter>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f000 f881 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000094 	.word	0x20000094
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	10909cec 	.word	0x10909cec

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a32      	ldr	r2, [pc, #200]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_GPIO_Init+0xe4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f000 fd4b 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_GPIO_Init+0xe8>)
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <MX_GPIO_Init+0xec>)
 8000c60:	f000 fb96 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c64:	230c      	movs	r3, #12
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c74:	2307      	movs	r3, #7
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f000 fb85 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c86:	2320      	movs	r3, #32
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f000 fb76 	bl	8001390 <HAL_GPIO_Init>

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	10210000 	.word	0x10210000
 8000cb4:	48000800 	.word	0x48000800

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <opt3001_writedata>:

static uint8_t device_addr= OPT3001_ADDR1;
static uint16_t config_data= 0xCE10;        //The sensor works in continuous operation mode by default.


void opt3001_writedata(uint8_t device_addr, uint8_t register_addr, uint16_t data){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	71bb      	strb	r3, [r7, #6]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	80bb      	strh	r3, [r7, #4]

	 uint8_t buffer[3];
	 buffer[0]= register_addr;
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	733b      	strb	r3, [r7, #12]
	 buffer[1]= (data)>>8;
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	737b      	strb	r3, [r7, #13]
	 buffer[2]= (data)& 0x00FF;
 8000ce8:	88bb      	ldrh	r3, [r7, #4]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	73bb      	strb	r3, [r7, #14]
	 HAL_I2C_Master_Transmit(&hi2c1, device_addr<<1, buffer, 3, 50);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	b299      	uxth	r1, r3
 8000cf6:	f107 020c 	add.w	r2, r7, #12
 8000cfa:	2332      	movs	r3, #50	; 0x32
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2303      	movs	r3, #3
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <opt3001_writedata+0x48>)
 8000d02:	f000 fd95 	bl	8001830 <HAL_I2C_Master_Transmit>
 }
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000094 	.word	0x20000094

08000d14 <opt3001_readdata>:


uint16_t opt3001_readdata(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af02      	add	r7, sp, #8

	uint8_t readbuffer[2];
	uint16_t received_data;
	HAL_I2C_Master_Receive(&hi2c1, device_addr<<1, readbuffer, 2, 50);
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <opt3001_readdata+0x38>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	b299      	uxth	r1, r3
 8000d24:	1d3a      	adds	r2, r7, #4
 8000d26:	2332      	movs	r3, #50	; 0x32
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <opt3001_readdata+0x3c>)
 8000d2e:	f000 fe73 	bl	8001a18 <HAL_I2C_Master_Receive>
	received_data=((readbuffer[0] << 8) | readbuffer[1]);
 8000d32:	793b      	ldrb	r3, [r7, #4]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	797b      	ldrb	r3, [r7, #5]
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	80fb      	strh	r3, [r7, #6]
	return received_data;
 8000d42:	88fb      	ldrh	r3, [r7, #6]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000094 	.word	0x20000094

08000d54 <opt3001_init>:

uint8_t opt3001_init(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK) {
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <opt3001_init+0x3c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b299      	uxth	r1, r3
 8000d62:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d66:	2201      	movs	r2, #1
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <opt3001_init+0x40>)
 8000d6a:	f000 ff4b 	bl	8001c04 <HAL_I2C_IsDeviceReady>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <opt3001_init+0x24>
		/* Return false */
		return 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e008      	b.n	8000d8a <opt3001_init+0x36>
	}

	opt3001_writedata(device_addr, OPT3001_ConfigReg, config_data);
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <opt3001_init+0x3c>)
 8000d7a:	7818      	ldrb	r0, [r3, #0]
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <opt3001_init+0x44>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	2101      	movs	r1, #1
 8000d84:	f7ff ffa0 	bl	8000cc8 <opt3001_writedata>
	return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000094 	.word	0x20000094
 8000d98:	20000002 	.word	0x20000002
 8000d9c:	00000000 	.word	0x00000000

08000da0 <calculate_lux>:


float calculate_lux(){
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
	uint16_t iExponent, iMantissa;
    float final_lux;
    uint16_t rawlux;

    opt3001_writedata(device_addr, OPT3001_ResultReg, 0x00);
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <calculate_lux+0xa0>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff8a 	bl	8000cc8 <opt3001_writedata>
    HAL_Delay(50);
 8000db4:	2032      	movs	r0, #50	; 0x32
 8000db6:	f000 f9e3 	bl	8001180 <HAL_Delay>
    rawlux=opt3001_readdata();
 8000dba:	f7ff ffab 	bl	8000d14 <opt3001_readdata>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	81fb      	strh	r3, [r7, #14]
    iMantissa = rawlux & 0x0FFF;
 8000dc2:	89fb      	ldrh	r3, [r7, #14]
 8000dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc8:	81bb      	strh	r3, [r7, #12]
    iExponent = (rawlux & 0xF000) >> 12;
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	0b1b      	lsrs	r3, r3, #12
 8000dce:	817b      	strh	r3, [r7, #10]
    final_lux= iMantissa * (0.01 * powf(2, iExponent));
 8000dd0:	89bb      	ldrh	r3, [r7, #12]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb4a 	bl	800046c <__aeabi_i2d>
 8000dd8:	4604      	mov	r4, r0
 8000dda:	460d      	mov	r5, r1
 8000ddc:	897b      	ldrh	r3, [r7, #10]
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	eef0 0a67 	vmov.f32	s1, s15
 8000dea:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000dee:	f002 fd81 	bl	80038f4 <powf>
 8000df2:	ee10 3a10 	vmov	r3, s0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb4a 	bl	8000490 <__aeabi_f2d>
 8000dfc:	a30e      	add	r3, pc, #56	; (adr r3, 8000e38 <calculate_lux+0x98>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	f7ff fb9d 	bl	8000540 <__aeabi_dmul>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	4629      	mov	r1, r5
 8000e0e:	f7ff fb97 	bl	8000540 <__aeabi_dmul>
 8000e12:	4603      	mov	r3, r0
 8000e14:	460c      	mov	r4, r1
 8000e16:	4618      	mov	r0, r3
 8000e18:	4621      	mov	r1, r4
 8000e1a:	f7ff fda3 	bl	8000964 <__aeabi_d2f>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	607b      	str	r3, [r7, #4]
    return final_lux;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ee07 3a90 	vmov	s15, r3
}
 8000e28:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	f3af 8000 	nop.w
 8000e38:	47ae147b 	.word	0x47ae147b
 8000e3c:	3f847ae1 	.word	0x3f847ae1
 8000e40:	20000000 	.word	0x20000000

08000e44 <read_devid>:

uint16_t read_devid(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

	uint16_t received_data;
    opt3001_writedata(device_addr, OPT3001_DeviceID, 0x00);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <read_devid+0x2c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	217f      	movs	r1, #127	; 0x7f
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff38 	bl	8000cc8 <opt3001_writedata>
    HAL_Delay(50);
 8000e58:	2032      	movs	r0, #50	; 0x32
 8000e5a:	f000 f991 	bl	8001180 <HAL_Delay>
    received_data=opt3001_readdata();
 8000e5e:	f7ff ff59 	bl	8000d14 <opt3001_readdata>
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]

	return received_data;
 8000e66:	88fb      	ldrh	r3, [r7, #6]

}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000

08000e74 <read_manufacturer_id>:

uint16_t read_manufacturer_id(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

	uint16_t received_data;
    opt3001_writedata(device_addr, OPT3001_ManuID, 0x00);
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <read_manufacturer_id+0x2c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	217e      	movs	r1, #126	; 0x7e
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff20 	bl	8000cc8 <opt3001_writedata>
    HAL_Delay(50);
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f000 f979 	bl	8001180 <HAL_Delay>
    received_data=opt3001_readdata();
 8000e8e:	f7ff ff41 	bl	8000d14 <opt3001_readdata>
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]

	return received_data;
 8000e96:	88fb      	ldrh	r3, [r7, #6]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_I2C_MspInit+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d127      	bne.n	8000f5e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f36:	2304      	movs	r3, #4
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <HAL_I2C_MspInit+0x84>)
 8000f42:	f000 fa25 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f50:	6593      	str	r3, [r2, #88]	; 0x58
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f8bc 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <SystemInit+0x64>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <SystemInit+0x64>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <SystemInit+0x68>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <SystemInit+0x68>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <SystemInit+0x68>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <SystemInit+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <SystemInit+0x68>)
 8000ffc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001000:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001004:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <SystemInit+0x68>)
 8001008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <SystemInit+0x68>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <SystemInit+0x68>)
 8001014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <SystemInit+0x68>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SystemInit+0x64>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001026:	609a      	str	r2, [r3, #8]
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	40021000 	.word	0x40021000

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001040:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001042:	e003      	b.n	800104c <LoopCopyDataInit>

08001044 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001046:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001048:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800104a:	3104      	adds	r1, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <LoopForever+0xa>)
	ldr	r3, =_edata
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001050:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001052:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001054:	d3f6      	bcc.n	8001044 <CopyDataInit>
	ldr	r2, =_sbss
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001058:	e002      	b.n	8001060 <LoopFillZerobss>

0800105a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800105a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800105c:	f842 3b04 	str.w	r3, [r2], #4

08001060 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <LoopForever+0x16>)
	cmp	r2, r3
 8001062:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001064:	d3f9      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001066:	f7ff ffb3 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f002 fc17 	bl	800389c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fcc9 	bl	8000a04 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001078:	08004388 	.word	0x08004388
	ldr	r0, =_sdata
 800107c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001080:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001084:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001088:	200000f0 	.word	0x200000f0

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_Init+0x3c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_Init+0x3c>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f000 f93e 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 f80f 	bl	80010d0 <HAL_InitTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	e001      	b.n	80010c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010be:	f7ff fef1 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_InitTick+0x68>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d022      	beq.n	800112a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_InitTick+0x6c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_InitTick+0x68>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f93c 	bl	8001376 <HAL_SYSTICK_Config>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10f      	bne.n	8001124 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d809      	bhi.n	800111e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110a:	2200      	movs	r2, #0
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	f000 f914 	bl	800133e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_InitTick+0x70>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e007      	b.n	800112e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e004      	b.n	800112e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000004 	.word	0x20000004
 8001140:	20000008 	.word	0x20000008

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x1c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x20>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4413      	add	r3, r2
 8001152:	4a03      	ldr	r2, [pc, #12]	; (8001160 <HAL_IncTick+0x1c>)
 8001154:	6013      	str	r3, [r2, #0]
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	200000ec 	.word	0x200000ec
 8001164:	2000000c 	.word	0x2000000c

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200000ec 	.word	0x200000ec

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d004      	beq.n	80011a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_Delay+0x40>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a4:	bf00      	nop
 80011a6:	f7ff ffdf 	bl	8001168 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d8f7      	bhi.n	80011a6 <HAL_Delay+0x26>
  {
  }
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff47 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff5c 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff8e 	bl	800127c <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffb0 	bl	80012e4 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e17f      	b.n	80016a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8171 	beq.w	800169a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d00b      	beq.n	80013d8 <HAL_GPIO_Init+0x48>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013cc:	2b11      	cmp	r3, #17
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b12      	cmp	r3, #18
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d118      	bne.n	8001478 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x128>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d123      	bne.n	8001500 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	6939      	ldr	r1, [r7, #16]
 80014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80ac 	beq.w	800169a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <HAL_GPIO_Init+0x32c>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <HAL_GPIO_Init+0x32c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6613      	str	r3, [r2, #96]	; 0x60
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_GPIO_Init+0x32c>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800155a:	4a59      	ldr	r2, [pc, #356]	; (80016c0 <HAL_GPIO_Init+0x330>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001584:	d025      	beq.n	80015d2 <HAL_GPIO_Init+0x242>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_GPIO_Init+0x334>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01f      	beq.n	80015ce <HAL_GPIO_Init+0x23e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4d      	ldr	r2, [pc, #308]	; (80016c8 <HAL_GPIO_Init+0x338>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x23a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4c      	ldr	r2, [pc, #304]	; (80016cc <HAL_GPIO_Init+0x33c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x236>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_GPIO_Init+0x340>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x232>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_GPIO_Init+0x344>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x22e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a49      	ldr	r2, [pc, #292]	; (80016d8 <HAL_GPIO_Init+0x348>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x22a>
 80015b6:	2306      	movs	r3, #6
 80015b8:	e00c      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015ba:	2307      	movs	r3, #7
 80015bc:	e00a      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015be:	2305      	movs	r3, #5
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015d2:	2300      	movs	r3, #0
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e4:	4936      	ldr	r1, [pc, #216]	; (80016c0 <HAL_GPIO_Init+0x330>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_GPIO_Init+0x34c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <HAL_GPIO_Init+0x34c>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800161c:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_GPIO_Init+0x34c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <HAL_GPIO_Init+0x34c>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_GPIO_Init+0x34c>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800166a:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <HAL_GPIO_Init+0x34c>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_GPIO_Init+0x34c>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001694:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_GPIO_Init+0x34c>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f ae78 	bne.w	80013a0 <HAL_GPIO_Init+0x10>
  }
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000c00 	.word	0x48000c00
 80016d0:	48001000 	.word	0x48001000
 80016d4:	48001400 	.word	0x48001400
 80016d8:	48001800 	.word	0x48001800
 80016dc:	40010400 	.word	0x40010400

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e081      	b.n	8001826 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fbd8 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2224      	movs	r2, #36	; 0x24
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001760:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001770:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e006      	b.n	8001798 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001796:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d104      	bne.n	80017aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	ea42 0103 	orr.w	r1, r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	021a      	lsls	r2, r3, #8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69d9      	ldr	r1, [r3, #28]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2220      	movs	r2, #32
 8001812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	460b      	mov	r3, r1
 800183e:	817b      	strh	r3, [r7, #10]
 8001840:	4613      	mov	r3, r2
 8001842:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	f040 80da 	bne.w	8001a06 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x30>
 800185c:	2302      	movs	r3, #2
 800185e:	e0d3      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001868:	f7ff fc7e 	bl	8001168 <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2319      	movs	r3, #25
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 faed 	bl	8001e5a <I2C_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0be      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2221      	movs	r2, #33	; 0x21
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2210      	movs	r2, #16
 8001896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	893a      	ldrh	r2, [r7, #8]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2bff      	cmp	r3, #255	; 0xff
 80018ba:	d90e      	bls.n	80018da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	22ff      	movs	r2, #255	; 0xff
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_I2C_Master_Transmit+0x1e0>)
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 fc50 	bl	8002178 <I2C_TransferConfig>
 80018d8:	e06c      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	8979      	ldrh	r1, [r7, #10]
 80018ec:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <HAL_I2C_Master_Transmit+0x1e0>)
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fc3f 	bl	8002178 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80018fa:	e05b      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	6a39      	ldr	r1, [r7, #32]
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 faea 	bl	8001eda <I2C_WaitOnTXISFlagUntilTimeout>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e07b      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d034      	beq.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	2b00      	cmp	r3, #0
 8001950:	d130      	bne.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2200      	movs	r2, #0
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fa7c 	bl	8001e5a <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e04d      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d90e      	bls.n	8001994 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	22ff      	movs	r2, #255	; 0xff
 800197a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	b2da      	uxtb	r2, r3
 8001982:	8979      	ldrh	r1, [r7, #10]
 8001984:	2300      	movs	r3, #0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fbf3 	bl	8002178 <I2C_TransferConfig>
 8001992:	e00f      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	8979      	ldrh	r1, [r7, #10]
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fbe2 	bl	8002178 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d19e      	bne.n	80018fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fac9 	bl	8001f5a <I2C_WaitOnSTOPFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01a      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2220      	movs	r2, #32
 80019d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_I2C_Master_Transmit+0x1e4>)
 80019e6:	400b      	ands	r3, r1
 80019e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
  }
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	80002000 	.word	0x80002000
 8001a14:	fe00e800 	.word	0xfe00e800

08001a18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	460b      	mov	r3, r1
 8001a26:	817b      	strh	r3, [r7, #10]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b20      	cmp	r3, #32
 8001a36:	f040 80db 	bne.w	8001bf0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2C_Master_Receive+0x30>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0d4      	b.n	8001bf2 <HAL_I2C_Master_Receive+0x1da>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a50:	f7ff fb8a 	bl	8001168 <HAL_GetTick>
 8001a54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2319      	movs	r3, #25
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f9f9 	bl	8001e5a <I2C_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0bf      	b.n	8001bf2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2222      	movs	r2, #34	; 0x22
 8001a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	893a      	ldrh	r2, [r7, #8]
 8001a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2bff      	cmp	r3, #255	; 0xff
 8001aa2:	d90e      	bls.n	8001ac2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	22ff      	movs	r2, #255	; 0xff
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	8979      	ldrh	r1, [r7, #10]
 8001ab2:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <HAL_I2C_Master_Receive+0x1e4>)
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fb5c 	bl	8002178 <I2C_TransferConfig>
 8001ac0:	e06d      	b.n	8001b9e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	8979      	ldrh	r1, [r7, #10]
 8001ad4:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <HAL_I2C_Master_Receive+0x1e4>)
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fb4b 	bl	8002178 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ae2:	e05c      	b.n	8001b9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	6a39      	ldr	r1, [r7, #32]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fa73 	bl	8001fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e07c      	b.n	8001bf2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d034      	beq.n	8001b9e <HAL_I2C_Master_Receive+0x186>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d130      	bne.n	8001b9e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	2200      	movs	r2, #0
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f987 	bl	8001e5a <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e04d      	b.n	8001bf2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d90e      	bls.n	8001b7e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	; 0xff
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	8979      	ldrh	r1, [r7, #10]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fafe 	bl	8002178 <I2C_TransferConfig>
 8001b7c:	e00f      	b.n	8001b9e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	8979      	ldrh	r1, [r7, #10]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 faed 	bl	8002178 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d19d      	bne.n	8001ae4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	6a39      	ldr	r1, [r7, #32]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f9d4 	bl	8001f5a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e01a      	b.n	8001bf2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_I2C_Master_Receive+0x1e8>)
 8001bd0:	400b      	ands	r3, r1
 8001bd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	80002400 	.word	0x80002400
 8001c00:	fe00e800 	.word	0xfe00e800

08001c04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	460b      	mov	r3, r1
 8001c12:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	f040 80f1 	bne.w	8001e08 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c34:	d101      	bne.n	8001c3a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
 8001c38:	e0e7      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_I2C_IsDeviceReady+0x44>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0e0      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_I2C_IsDeviceReady+0x72>
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c74:	e004      	b.n	8001c80 <HAL_I2C_IsDeviceReady+0x7c>
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff fa6f 	bl	8001168 <HAL_GetTick>
 8001c8a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	bf0c      	ite	eq
 8001c9a:	2301      	moveq	r3, #1
 8001c9c:	2300      	movne	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001cb8:	e034      	b.n	8001d24 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d01a      	beq.n	8001cf8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff fa51 	bl	8001168 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <HAL_I2C_IsDeviceReady+0xd4>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e088      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d24:	7ffb      	ldrb	r3, [r7, #31]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <HAL_I2C_IsDeviceReady+0x12c>
 8001d2a:	7fbb      	ldrb	r3, [r7, #30]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0c4      	beq.n	8001cba <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d01a      	beq.n	8001d74 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2200      	movs	r2, #0
 8001d46:	2120      	movs	r1, #32
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f886 	bl	8001e5a <I2C_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e058      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e04a      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f86b 	bl	8001e5a <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e03d      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2210      	movs	r2, #16
 8001d94:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d118      	bne.n	8001dd8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f84a 	bl	8001e5a <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e01c      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	f63f af3b 	bhi.w	8001c5e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	f043 0220 	orr.w	r2, r3, #32
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d103      	bne.n	8001e30 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d007      	beq.n	8001e4e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	619a      	str	r2, [r3, #24]
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6a:	e022      	b.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e72:	d01e      	beq.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e74:	f7ff f978 	bl	8001168 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d302      	bcc.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d113      	bne.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f043 0220 	orr.w	r2, r3, #32
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d0cd      	beq.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ee6:	e02c      	b.n	8001f42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f8dd 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e02a      	b.n	8001f52 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f02:	d01e      	beq.n	8001f42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f04:	f7ff f930 	bl	8001168 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d302      	bcc.n	8001f1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d113      	bne.n	8001f42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f043 0220 	orr.w	r2, r3, #32
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e007      	b.n	8001f52 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d1cb      	bne.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f66:	e028      	b.n	8001fba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f89d 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e026      	b.n	8001fca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7c:	f7ff f8f4 	bl	8001168 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d302      	bcc.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d113      	bne.n	8001fba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e007      	b.n	8001fca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d1cf      	bne.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fe0:	e055      	b.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f860 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e053      	b.n	800209e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b20      	cmp	r3, #32
 8002002:	d129      	bne.n	8002058 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b04      	cmp	r3, #4
 8002010:	d105      	bne.n	800201e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e03f      	b.n	800209e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2220      	movs	r2, #32
 8002024:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002032:	400b      	ands	r3, r1
 8002034:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e022      	b.n	800209e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002058:	f7ff f886 	bl	8001168 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	429a      	cmp	r2, r3
 8002066:	d302      	bcc.n	800206e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f043 0220 	orr.w	r2, r3, #32
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e007      	b.n	800209e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b04      	cmp	r3, #4
 800209a:	d1a2      	bne.n	8001fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	fe00e800 	.word	0xfe00e800

080020ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d151      	bne.n	800216a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c6:	e022      	b.n	800210e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d01e      	beq.n	800210e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d0:	f7ff f84a 	bl	8001168 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d302      	bcc.n	80020e6 <I2C_IsAcknowledgeFailed+0x3a>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e02e      	b.n	800216c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b20      	cmp	r3, #32
 800211a:	d1d5      	bne.n	80020c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2220      	movs	r2, #32
 800212a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fe70 	bl	8001e12 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <I2C_IsAcknowledgeFailed+0xc8>)
 800213e:	400b      	ands	r3, r1
 8002140:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f043 0204 	orr.w	r2, r3, #4
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	fe00e800 	.word	0xfe00e800

08002178 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	817b      	strh	r3, [r7, #10]
 8002186:	4613      	mov	r3, r2
 8002188:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	0d5b      	lsrs	r3, r3, #21
 8002194:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <I2C_TransferConfig+0x58>)
 800219a:	430b      	orrs	r3, r1
 800219c:	43db      	mvns	r3, r3
 800219e:	ea02 0103 	and.w	r1, r2, r3
 80021a2:	897b      	ldrh	r3, [r7, #10]
 80021a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021a8:	7a7b      	ldrb	r3, [r7, #9]
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	03ff63ff 	.word	0x03ff63ff

080021d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d138      	bne.n	800225c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e032      	b.n	800225e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b20      	cmp	r3, #32
 800227e:	d139      	bne.n	80022f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800228a:	2302      	movs	r3, #2
 800228c:	e033      	b.n	80022f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2224      	movs	r2, #36	; 0x24
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_PWREx_GetVoltageRange+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40007000 	.word	0x40007000

08002320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232e:	d130      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233c:	d038      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002364:	e002      	b.n	800236c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3b01      	subs	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002378:	d102      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x60>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f2      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238c:	d110      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e00f      	b.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d007      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000
 80023c4:	20000004 	.word	0x20000004
 80023c8:	431bde83 	.word	0x431bde83

080023cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e3d4      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023de:	4ba1      	ldr	r3, [pc, #644]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e8:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80e4 	beq.w	80025c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_RCC_OscConfig+0x4a>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	f040 808b 	bne.w	8002524 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b01      	cmp	r3, #1
 8002412:	f040 8087 	bne.w	8002524 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002416:	4b93      	ldr	r3, [pc, #588]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x62>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e3ac      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	4b8c      	ldr	r3, [pc, #560]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_RCC_OscConfig+0x7c>
 800243e:	4b89      	ldr	r3, [pc, #548]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002446:	e005      	b.n	8002454 <HAL_RCC_OscConfig+0x88>
 8002448:	4b86      	ldr	r3, [pc, #536]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002454:	4293      	cmp	r3, r2
 8002456:	d223      	bcs.n	80024a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fd07 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e38d      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246c:	4b7d      	ldr	r3, [pc, #500]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b7a      	ldr	r3, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4977      	ldr	r1, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	4972      	ldr	r1, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
 800249e:	e025      	b.n	80024ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6f      	ldr	r2, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80024a6:	f043 0308 	orr.w	r3, r3, #8
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	496a      	ldr	r1, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024be:	4b69      	ldr	r3, [pc, #420]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4965      	ldr	r1, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fcc7 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e34d      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ec:	f000 fc36 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 80024f0:	4601      	mov	r1, r0
 80024f2:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	4a5a      	ldr	r2, [pc, #360]	; (8002668 <HAL_RCC_OscConfig+0x29c>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa21 f303 	lsr.w	r3, r1, r3
 8002508:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_RCC_OscConfig+0x2a0>)
 800250a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800250c:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_OscConfig+0x2a4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fddd 	bl	80010d0 <HAL_InitTick>
 8002516:	4603      	mov	r3, r0
 8002518:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d052      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	e331      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d032      	beq.n	8002592 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800252c:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a4c      	ldr	r2, [pc, #304]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002538:	f7fe fe16 	bl	8001168 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002540:	f7fe fe12 	bl	8001168 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e31a      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	493b      	ldr	r1, [pc, #236]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	4936      	ldr	r1, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	e01a      	b.n	80025c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a33      	ldr	r2, [pc, #204]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800259e:	f7fe fde3 	bl	8001168 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a6:	f7fe fddf 	bl	8001168 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e2e7      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b8:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1da>
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d074      	beq.n	80026be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x21a>
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	d10e      	bne.n	80025fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d064      	beq.n	80026bc <HAL_RCC_OscConfig+0x2f0>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d160      	bne.n	80026bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e2c4      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x24a>
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a15      	ldr	r2, [pc, #84]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e01d      	b.n	8002652 <HAL_RCC_OscConfig+0x286>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x26e>
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	e00b      	b.n	8002652 <HAL_RCC_OscConfig+0x286>
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a06      	ldr	r2, [pc, #24]	; (8002664 <HAL_RCC_OscConfig+0x298>)
 800264c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01c      	beq.n	8002694 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fd85 	bl	8001168 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002660:	e011      	b.n	8002686 <HAL_RCC_OscConfig+0x2ba>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	08004318 	.word	0x08004318
 800266c:	20000004 	.word	0x20000004
 8002670:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fd78 	bl	8001168 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e280      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002686:	4baf      	ldr	r3, [pc, #700]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x2a8>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fd68 	bl	8001168 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fd64 	bl	8001168 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e26c      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ae:	4ba5      	ldr	r3, [pc, #660]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x2d0>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d060      	beq.n	800278c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_OscConfig+0x310>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d119      	bne.n	800270a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d116      	bne.n	800270a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	4b99      	ldr	r3, [pc, #612]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x328>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e249      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b93      	ldr	r3, [pc, #588]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	4990      	ldr	r1, [pc, #576]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	e040      	b.n	800278c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d023      	beq.n	800275a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002712:	4b8c      	ldr	r3, [pc, #560]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a8b      	ldr	r2, [pc, #556]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fd23 	bl	8001168 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe fd1f 	bl	8001168 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e227      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002738:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	061b      	lsls	r3, r3, #24
 8002752:	497c      	ldr	r1, [pc, #496]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
 8002758:	e018      	b.n	800278c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b7a      	ldr	r3, [pc, #488]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a79      	ldr	r2, [pc, #484]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fcff 	bl	8001168 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fcfb 	bl	8001168 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e203      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002780:	4b70      	ldr	r3, [pc, #448]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03c      	beq.n	8002812 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01c      	beq.n	80027da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	4a67      	ldr	r2, [pc, #412]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fcda 	bl	8001168 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fcd6 	bl	8001168 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1de      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ca:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80027cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ef      	beq.n	80027b8 <HAL_RCC_OscConfig+0x3ec>
 80027d8:	e01b      	b.n	8002812 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	4a58      	ldr	r2, [pc, #352]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe fcbd 	bl	8001168 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f2:	f7fe fcb9 	bl	8001168 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1c1      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ef      	bne.n	80027f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80a6 	beq.w	800296c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002824:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	4a43      	ldr	r2, [pc, #268]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	; 0x58
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002848:	2301      	movs	r3, #1
 800284a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284c:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HAL_RCC_OscConfig+0x57c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d118      	bne.n	800288a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002858:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_OscConfig+0x57c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3a      	ldr	r2, [pc, #232]	; (8002948 <HAL_RCC_OscConfig+0x57c>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002864:	f7fe fc80 	bl	8001168 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286c:	f7fe fc7c 	bl	8001168 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e184      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287e:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HAL_RCC_OscConfig+0x57c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4d8>
 8002892:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a2:	e024      	b.n	80028ee <HAL_RCC_OscConfig+0x522>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d110      	bne.n	80028ce <HAL_RCC_OscConfig+0x502>
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a20      	ldr	r2, [pc, #128]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028cc:	e00f      	b.n	80028ee <HAL_RCC_OscConfig+0x522>
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe fc37 	bl	8001168 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fc33 	bl	8001168 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e139      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_OscConfig+0x578>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ed      	beq.n	80028fe <HAL_RCC_OscConfig+0x532>
 8002922:	e01a      	b.n	800295a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fc20 	bl	8001168 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800292a:	e00f      	b.n	800294c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe fc1c 	bl	8001168 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d906      	bls.n	800294c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e122      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800294c:	4b90      	ldr	r3, [pc, #576]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e8      	bne.n	800292c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295a:	7ffb      	ldrb	r3, [r7, #31]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b8b      	ldr	r3, [pc, #556]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	4a8a      	ldr	r2, [pc, #552]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8108 	beq.w	8002b86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	2b02      	cmp	r3, #2
 800297c:	f040 80d0 	bne.w	8002b20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002980:	4b83      	ldr	r3, [pc, #524]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	429a      	cmp	r2, r3
 8002992:	d130      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	3b01      	subs	r3, #1
 80029a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d127      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d11f      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029c0:	2a07      	cmp	r2, #7
 80029c2:	bf14      	ite	ne
 80029c4:	2201      	movne	r2, #1
 80029c6:	2200      	moveq	r2, #0
 80029c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d113      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	3b01      	subs	r3, #1
 80029dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d06e      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d069      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029fc:	4b64      	ldr	r3, [pc, #400]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a08:	4b61      	ldr	r3, [pc, #388]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b7      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a18:	4b5d      	ldr	r3, [pc, #372]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5c      	ldr	r2, [pc, #368]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a24:	f7fe fba0 	bl	8001168 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fb9c 	bl	8001168 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0a4      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4a:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	4b51      	ldr	r3, [pc, #324]	; (8002b94 <HAL_RCC_OscConfig+0x7c8>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a5a:	3a01      	subs	r2, #1
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a64:	0212      	lsls	r2, r2, #8
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a6c:	0852      	lsrs	r2, r2, #1
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	0552      	lsls	r2, r2, #21
 8002a72:	4311      	orrs	r1, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a78:	0852      	lsrs	r2, r2, #1
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0652      	lsls	r2, r2, #25
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a84:	0912      	lsrs	r2, r2, #4
 8002a86:	0452      	lsls	r2, r2, #17
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	4941      	ldr	r1, [pc, #260]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a90:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3e      	ldr	r2, [pc, #248]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a9c:	4b3c      	ldr	r3, [pc, #240]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a3b      	ldr	r2, [pc, #236]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa8:	f7fe fb5e 	bl	8001168 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fb5a 	bl	8001168 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e062      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ace:	e05a      	b.n	8002b86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e059      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d152      	bne.n	8002b86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af8:	f7fe fb36 	bl	8001168 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fb32 	bl	8001168 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e03a      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x734>
 8002b1e:	e032      	b.n	8002b86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d02d      	beq.n	8002b82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b44:	f023 0303 	bic.w	r3, r3, #3
 8002b48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fb05 	bl	8001168 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe fb01 	bl	8001168 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e009      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCC_OscConfig+0x7c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x796>
 8002b80:	e001      	b.n	8002b86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	f99d808c 	.word	0xf99d808c

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0c8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d910      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4961      	ldr	r1, [pc, #388]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0b0      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d04c      	beq.n	8002c82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf0:	4b56      	ldr	r3, [pc, #344]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d121      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e09e      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d115      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e092      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c20:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e086      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e07e      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c40:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 0203 	bic.w	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	493f      	ldr	r1, [pc, #252]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c52:	f7fe fa89 	bl	8001168 <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5a:	f7fe fa85 	bl	8001168 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e066      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c70:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 020c 	and.w	r2, r3, #12
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d1eb      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	492c      	ldr	r1, [pc, #176]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d210      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4924      	ldr	r1, [pc, #144]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e036      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4918      	ldr	r1, [pc, #96]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4910      	ldr	r1, [pc, #64]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0e:	f000 f825 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d12:	4601      	mov	r1, r0
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_RCC_ClockConfig+0x1b4>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	5cd3      	ldrb	r3, [r2, r3]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	fa21 f303 	lsr.w	r3, r1, r3
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f9cc 	bl	80010d0 <HAL_InitTick>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08004318 	.word	0x08004318
 8002d54:	20000004 	.word	0x20000004
 8002d58:	20000008 	.word	0x20000008

08002d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d74:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x34>
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d121      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d11e      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e005      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dac:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d102      	bne.n	8002dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	e004      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d133      	bne.n	8002e52 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0xa4>
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0xaa>
 8002dfe:	e005      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e02:	617b      	str	r3, [r7, #20]
      break;
 8002e04:	e005      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e08:	617b      	str	r3, [r7, #20]
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	617b      	str	r3, [r7, #20]
      break;
 8002e10:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	fb02 f203 	mul.w	r2, r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0e5b      	lsrs	r3, r3, #25
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e52:	69bb      	ldr	r3, [r7, #24]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3724      	adds	r7, #36	; 0x24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08004328 	.word	0x08004328
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e88:	f7ff fa3c 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8002e8c:	6178      	str	r0, [r7, #20]
 8002e8e:	e014      	b.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea8:	f7ff fa2c 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8002eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec0:	d10b      	bne.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d919      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2ba0      	cmp	r3, #160	; 0xa0
 8002ecc:	d902      	bls.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ece:	2302      	movs	r3, #2
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e013      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	e010      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d902      	bls.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e00a      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d102      	bne.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eec:	2302      	movs	r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e004      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b70      	cmp	r3, #112	; 0x70
 8002ef6:	d101      	bne.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4909      	ldr	r1, [pc, #36]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03f      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f54:	d01c      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5a:	d802      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00e      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002f60:	e01f      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f66:	d003      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f6c:	d01c      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f70:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a84      	ldr	r2, [pc, #528]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7c:	e015      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fab9 	bl	80034fc <RCCEx_PLLSAI1_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f8e:	e00c      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3320      	adds	r3, #32
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fba0 	bl	80036dc <RCCEx_PLLSAI2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb0:	4b75      	ldr	r3, [pc, #468]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fbe:	4972      	ldr	r1, [pc, #456]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fc6:	e001      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03f      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe0:	d01c      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe6:	d802      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002fec:	e01f      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff2:	d003      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ff4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ff8:	d01c      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002ffa:	e018      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ffc:	4b62      	ldr	r3, [pc, #392]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a61      	ldr	r2, [pc, #388]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003008:	e015      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fa73 	bl	80034fc <RCCEx_PLLSAI1_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800301a:	e00c      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3320      	adds	r3, #32
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fb5a 	bl	80036dc <RCCEx_PLLSAI2_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800302c:	e003      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	74fb      	strb	r3, [r7, #19]
      break;
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800303c:	4b52      	ldr	r3, [pc, #328]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800304a:	494f      	ldr	r1, [pc, #316]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003052:	e001      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a0 	beq.w	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b41      	ldr	r3, [pc, #260]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	4a40      	ldr	r2, [pc, #256]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308a:	6593      	str	r3, [r2, #88]	; 0x58
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003098:	2301      	movs	r3, #1
 800309a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3a      	ldr	r2, [pc, #232]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a8:	f7fe f85e 	bl	8001168 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ae:	e009      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b0:	f7fe f85a 	bl	8001168 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d902      	bls.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	74fb      	strb	r3, [r7, #19]
        break;
 80030c2:	e005      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c4:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ef      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d15c      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01f      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d019      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	4a20      	ldr	r2, [pc, #128]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003120:	4a19      	ldr	r2, [pc, #100]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d016      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe f819 	bl	8001168 <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003138:	e00b      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313a:	f7fe f815 	bl	8001168 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d902      	bls.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	74fb      	strb	r3, [r7, #19]
            break;
 8003150:	e006      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ec      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003176:	4904      	ldr	r1, [pc, #16]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
 8003184:	e006      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003194:	7c7b      	ldrb	r3, [r7, #17]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b9e      	ldr	r3, [pc, #632]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	4a9d      	ldr	r2, [pc, #628]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b2:	4b98      	ldr	r3, [pc, #608]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f023 0203 	bic.w	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	4994      	ldr	r1, [pc, #592]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d4:	4b8f      	ldr	r3, [pc, #572]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 020c 	bic.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	498c      	ldr	r1, [pc, #560]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031f6:	4b87      	ldr	r3, [pc, #540]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	4983      	ldr	r1, [pc, #524]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003218:	4b7e      	ldr	r3, [pc, #504]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	497b      	ldr	r1, [pc, #492]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800323a:	4b76      	ldr	r3, [pc, #472]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	4972      	ldr	r1, [pc, #456]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800325c:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	496a      	ldr	r1, [pc, #424]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	4961      	ldr	r1, [pc, #388]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a0:	4b5c      	ldr	r3, [pc, #368]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ae:	4959      	ldr	r1, [pc, #356]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032c2:	4b54      	ldr	r3, [pc, #336]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	4950      	ldr	r1, [pc, #320]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032e4:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	4948      	ldr	r1, [pc, #288]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003306:	4b43      	ldr	r3, [pc, #268]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	493f      	ldr	r1, [pc, #252]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d028      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003328:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003336:	4937      	ldr	r1, [pc, #220]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003346:	d106      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003348:	4b32      	ldr	r3, [pc, #200]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a31      	ldr	r2, [pc, #196]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800334e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003352:	60d3      	str	r3, [r2, #12]
 8003354:	e011      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335e:	d10c      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	2101      	movs	r1, #1
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f8c8 	bl	80034fc <RCCEx_PLLSAI1_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d028      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	491f      	ldr	r1, [pc, #124]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b0:	60d3      	str	r3, [r2, #12]
 80033b2:	e011      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2101      	movs	r1, #1
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f899 	bl	80034fc <RCCEx_PLLSAI1_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d02b      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003402:	d109      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a02      	ldr	r2, [pc, #8]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340e:	60d3      	str	r3, [r2, #12]
 8003410:	e014      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f867 	bl	80034fc <RCCEx_PLLSAI1_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d02f      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003456:	4928      	ldr	r1, [pc, #160]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003466:	d10d      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f844 	bl	80034fc <RCCEx_PLLSAI1_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d014      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	74bb      	strb	r3, [r7, #18]
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3320      	adds	r3, #32
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f921 	bl	80036dc <RCCEx_PLLSAI2_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c2:	490d      	ldr	r1, [pc, #52]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e6:	4904      	ldr	r1, [pc, #16]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000

080034fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800350a:	4b73      	ldr	r3, [pc, #460]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d018      	beq.n	8003548 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003516:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0203 	and.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d10d      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
       ||
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
       ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d044      	beq.n	80035cc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	e041      	b.n	80035cc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d00c      	beq.n	800356a <RCCEx_PLLSAI1_Config+0x6e>
 8003550:	2b03      	cmp	r3, #3
 8003552:	d013      	beq.n	800357c <RCCEx_PLLSAI1_Config+0x80>
 8003554:	2b01      	cmp	r3, #1
 8003556:	d120      	bne.n	800359a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003558:	4b5f      	ldr	r3, [pc, #380]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d11d      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e01a      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800356a:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	2b00      	cmp	r3, #0
 8003574:	d116      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800357a:	e013      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800357c:	4b56      	ldr	r3, [pc, #344]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10f      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003598:	e006      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      break;
 800359e:	e004      	b.n	80035aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035a0:	bf00      	nop
 80035a2:	e002      	b.n	80035aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035b0:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	430b      	orrs	r3, r1
 80035c6:	4944      	ldr	r1, [pc, #272]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d17d      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035de:	f7fd fdc3 	bl	8001168 <HAL_GetTick>
 80035e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e4:	e009      	b.n	80035fa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035e6:	f7fd fdbf 	bl	8001168 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d902      	bls.n	80035fa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	73fb      	strb	r3, [r7, #15]
        break;
 80035f8:	e005      	b.n	8003606 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035fa:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ef      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d160      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d111      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003612:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6892      	ldr	r2, [r2, #8]
 8003622:	0211      	lsls	r1, r2, #8
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68d2      	ldr	r2, [r2, #12]
 8003628:	0912      	lsrs	r2, r2, #4
 800362a:	0452      	lsls	r2, r2, #17
 800362c:	430a      	orrs	r2, r1
 800362e:	492a      	ldr	r1, [pc, #168]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	610b      	str	r3, [r1, #16]
 8003634:	e027      	b.n	8003686 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d112      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	0211      	lsls	r1, r2, #8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6912      	ldr	r2, [r2, #16]
 8003652:	0852      	lsrs	r2, r2, #1
 8003654:	3a01      	subs	r2, #1
 8003656:	0552      	lsls	r2, r2, #21
 8003658:	430a      	orrs	r2, r1
 800365a:	491f      	ldr	r1, [pc, #124]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	610b      	str	r3, [r1, #16]
 8003660:	e011      	b.n	8003686 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800366a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6892      	ldr	r2, [r2, #8]
 8003672:	0211      	lsls	r1, r2, #8
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6952      	ldr	r2, [r2, #20]
 8003678:	0852      	lsrs	r2, r2, #1
 800367a:	3a01      	subs	r2, #1
 800367c:	0652      	lsls	r2, r2, #25
 800367e:	430a      	orrs	r2, r1
 8003680:	4915      	ldr	r1, [pc, #84]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800368c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003690:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd fd69 	bl	8001168 <HAL_GetTick>
 8003696:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003698:	e009      	b.n	80036ae <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800369a:	f7fd fd65 	bl	8001168 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d902      	bls.n	80036ae <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	73fb      	strb	r3, [r7, #15]
          break;
 80036ac:	e005      	b.n	80036ba <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ef      	beq.n	800369a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ea:	4b68      	ldr	r3, [pc, #416]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d018      	beq.n	8003728 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0203 	and.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d10d      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
       ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
       ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d044      	beq.n	80037ac <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e041      	b.n	80037ac <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d00c      	beq.n	800374a <RCCEx_PLLSAI2_Config+0x6e>
 8003730:	2b03      	cmp	r3, #3
 8003732:	d013      	beq.n	800375c <RCCEx_PLLSAI2_Config+0x80>
 8003734:	2b01      	cmp	r3, #1
 8003736:	d120      	bne.n	800377a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003738:	4b54      	ldr	r3, [pc, #336]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11d      	bne.n	8003780 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003748:	e01a      	b.n	8003780 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800374a:	4b50      	ldr	r3, [pc, #320]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375a:	e013      	b.n	8003784 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375c:	4b4b      	ldr	r3, [pc, #300]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10f      	bne.n	8003788 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003768:	4b48      	ldr	r3, [pc, #288]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003778:	e006      	b.n	8003788 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      break;
 800377e:	e004      	b.n	800378a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003780:	bf00      	nop
 8003782:	e002      	b.n	800378a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003788:	bf00      	nop
    }

    if(status == HAL_OK)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003790:	4b3e      	ldr	r3, [pc, #248]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	430b      	orrs	r3, r1
 80037a6:	4939      	ldr	r1, [pc, #228]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d167      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a35      	ldr	r2, [pc, #212]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037be:	f7fd fcd3 	bl	8001168 <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037c4:	e009      	b.n	80037da <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037c6:	f7fd fccf 	bl	8001168 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d902      	bls.n	80037da <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	73fb      	strb	r3, [r7, #15]
        break;
 80037d8:	e005      	b.n	80037e6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037da:	4b2c      	ldr	r3, [pc, #176]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d14a      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d111      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6892      	ldr	r2, [r2, #8]
 8003802:	0211      	lsls	r1, r2, #8
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68d2      	ldr	r2, [r2, #12]
 8003808:	0912      	lsrs	r2, r2, #4
 800380a:	0452      	lsls	r2, r2, #17
 800380c:	430a      	orrs	r2, r1
 800380e:	491f      	ldr	r1, [pc, #124]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	614b      	str	r3, [r1, #20]
 8003814:	e011      	b.n	800383a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800381e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6892      	ldr	r2, [r2, #8]
 8003826:	0211      	lsls	r1, r2, #8
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6912      	ldr	r2, [r2, #16]
 800382c:	0852      	lsrs	r2, r2, #1
 800382e:	3a01      	subs	r2, #1
 8003830:	0652      	lsls	r2, r2, #25
 8003832:	430a      	orrs	r2, r1
 8003834:	4915      	ldr	r1, [pc, #84]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003844:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fd fc8f 	bl	8001168 <HAL_GetTick>
 800384a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800384c:	e009      	b.n	8003862 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800384e:	f7fd fc8b 	bl	8001168 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d902      	bls.n	8003862 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	73fb      	strb	r3, [r7, #15]
          break;
 8003860:	e005      	b.n	800386e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ef      	beq.n	800384e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <RCCEx_PLLSAI2_Config+0x1b0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000

08003890 <__errno>:
 8003890:	4b01      	ldr	r3, [pc, #4]	; (8003898 <__errno+0x8>)
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000010 	.word	0x20000010

0800389c <__libc_init_array>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	4e0d      	ldr	r6, [pc, #52]	; (80038d4 <__libc_init_array+0x38>)
 80038a0:	4c0d      	ldr	r4, [pc, #52]	; (80038d8 <__libc_init_array+0x3c>)
 80038a2:	1ba4      	subs	r4, r4, r6
 80038a4:	10a4      	asrs	r4, r4, #2
 80038a6:	2500      	movs	r5, #0
 80038a8:	42a5      	cmp	r5, r4
 80038aa:	d109      	bne.n	80038c0 <__libc_init_array+0x24>
 80038ac:	4e0b      	ldr	r6, [pc, #44]	; (80038dc <__libc_init_array+0x40>)
 80038ae:	4c0c      	ldr	r4, [pc, #48]	; (80038e0 <__libc_init_array+0x44>)
 80038b0:	f000 fd26 	bl	8004300 <_init>
 80038b4:	1ba4      	subs	r4, r4, r6
 80038b6:	10a4      	asrs	r4, r4, #2
 80038b8:	2500      	movs	r5, #0
 80038ba:	42a5      	cmp	r5, r4
 80038bc:	d105      	bne.n	80038ca <__libc_init_array+0x2e>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038c4:	4798      	blx	r3
 80038c6:	3501      	adds	r5, #1
 80038c8:	e7ee      	b.n	80038a8 <__libc_init_array+0xc>
 80038ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ce:	4798      	blx	r3
 80038d0:	3501      	adds	r5, #1
 80038d2:	e7f2      	b.n	80038ba <__libc_init_array+0x1e>
 80038d4:	08004380 	.word	0x08004380
 80038d8:	08004380 	.word	0x08004380
 80038dc:	08004380 	.word	0x08004380
 80038e0:	08004384 	.word	0x08004384

080038e4 <memset>:
 80038e4:	4402      	add	r2, r0
 80038e6:	4603      	mov	r3, r0
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d100      	bne.n	80038ee <memset+0xa>
 80038ec:	4770      	bx	lr
 80038ee:	f803 1b01 	strb.w	r1, [r3], #1
 80038f2:	e7f9      	b.n	80038e8 <memset+0x4>

080038f4 <powf>:
 80038f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80038f8:	ed2d 8b04 	vpush	{d8-d9}
 80038fc:	4ca7      	ldr	r4, [pc, #668]	; (8003b9c <powf+0x2a8>)
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	eef0 8a40 	vmov.f32	s17, s0
 8003904:	eeb0 8a60 	vmov.f32	s16, s1
 8003908:	f000 f958 	bl	8003bbc <__ieee754_powf>
 800390c:	f994 5000 	ldrsb.w	r5, [r4]
 8003910:	1c6b      	adds	r3, r5, #1
 8003912:	eeb0 9a40 	vmov.f32	s18, s0
 8003916:	4626      	mov	r6, r4
 8003918:	d05f      	beq.n	80039da <powf+0xe6>
 800391a:	eeb4 8a48 	vcmp.f32	s16, s16
 800391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003922:	d65a      	bvs.n	80039da <powf+0xe6>
 8003924:	eef4 8a68 	vcmp.f32	s17, s17
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	d721      	bvc.n	8003972 <powf+0x7e>
 800392e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003936:	d150      	bne.n	80039da <powf+0xe6>
 8003938:	2301      	movs	r3, #1
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4b98      	ldr	r3, [pc, #608]	; (8003ba0 <powf+0x2ac>)
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	ee18 0a90 	vmov	r0, s17
 8003944:	2300      	movs	r3, #0
 8003946:	9308      	str	r3, [sp, #32]
 8003948:	f7fc fda2 	bl	8000490 <__aeabi_f2d>
 800394c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003950:	ee18 0a10 	vmov	r0, s16
 8003954:	f7fc fd9c 	bl	8000490 <__aeabi_f2d>
 8003958:	4b92      	ldr	r3, [pc, #584]	; (8003ba4 <powf+0x2b0>)
 800395a:	2200      	movs	r2, #0
 800395c:	2d02      	cmp	r5, #2
 800395e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003962:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003966:	d032      	beq.n	80039ce <powf+0xda>
 8003968:	4668      	mov	r0, sp
 800396a:	f000 fbea 	bl	8004142 <matherr>
 800396e:	bb40      	cbnz	r0, 80039c2 <powf+0xce>
 8003970:	e065      	b.n	8003a3e <powf+0x14a>
 8003972:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8003ba8 <powf+0x2b4>
 8003976:	eef4 8a69 	vcmp.f32	s17, s19
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d163      	bne.n	8003a48 <powf+0x154>
 8003980:	eeb4 8a69 	vcmp.f32	s16, s19
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	d12e      	bne.n	80039e8 <powf+0xf4>
 800398a:	2301      	movs	r3, #1
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	4b84      	ldr	r3, [pc, #528]	; (8003ba0 <powf+0x2ac>)
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	ee18 0a90 	vmov	r0, s17
 8003996:	2300      	movs	r3, #0
 8003998:	9308      	str	r3, [sp, #32]
 800399a:	f7fc fd79 	bl	8000490 <__aeabi_f2d>
 800399e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039a2:	ee18 0a10 	vmov	r0, s16
 80039a6:	f7fc fd73 	bl	8000490 <__aeabi_f2d>
 80039aa:	2200      	movs	r2, #0
 80039ac:	2300      	movs	r3, #0
 80039ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80039b6:	2d00      	cmp	r5, #0
 80039b8:	d0d6      	beq.n	8003968 <powf+0x74>
 80039ba:	4b7a      	ldr	r3, [pc, #488]	; (8003ba4 <powf+0x2b0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80039c2:	9b08      	ldr	r3, [sp, #32]
 80039c4:	b11b      	cbz	r3, 80039ce <powf+0xda>
 80039c6:	f7ff ff63 	bl	8003890 <__errno>
 80039ca:	9b08      	ldr	r3, [sp, #32]
 80039cc:	6003      	str	r3, [r0, #0]
 80039ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039d2:	f7fc ffc7 	bl	8000964 <__aeabi_d2f>
 80039d6:	ee09 0a10 	vmov	s18, r0
 80039da:	eeb0 0a49 	vmov.f32	s0, s18
 80039de:	b00a      	add	sp, #40	; 0x28
 80039e0:	ecbd 8b04 	vpop	{d8-d9}
 80039e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80039e8:	eeb0 0a48 	vmov.f32	s0, s16
 80039ec:	f000 fbb2 	bl	8004154 <finitef>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	d0f2      	beq.n	80039da <powf+0xe6>
 80039f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	d5ed      	bpl.n	80039da <powf+0xe6>
 80039fe:	2301      	movs	r3, #1
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4b67      	ldr	r3, [pc, #412]	; (8003ba0 <powf+0x2ac>)
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	ee18 0a90 	vmov	r0, s17
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9308      	str	r3, [sp, #32]
 8003a0e:	f7fc fd3f 	bl	8000490 <__aeabi_f2d>
 8003a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a16:	ee18 0a10 	vmov	r0, s16
 8003a1a:	f7fc fd39 	bl	8000490 <__aeabi_f2d>
 8003a1e:	f994 3000 	ldrsb.w	r3, [r4]
 8003a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a26:	b923      	cbnz	r3, 8003a32 <powf+0x13e>
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a30:	e79a      	b.n	8003968 <powf+0x74>
 8003a32:	495e      	ldr	r1, [pc, #376]	; (8003bac <powf+0x2b8>)
 8003a34:	2000      	movs	r0, #0
 8003a36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d194      	bne.n	8003968 <powf+0x74>
 8003a3e:	f7ff ff27 	bl	8003890 <__errno>
 8003a42:	2321      	movs	r3, #33	; 0x21
 8003a44:	6003      	str	r3, [r0, #0]
 8003a46:	e7bc      	b.n	80039c2 <powf+0xce>
 8003a48:	f000 fb84 	bl	8004154 <finitef>
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d173      	bne.n	8003b3a <powf+0x246>
 8003a52:	eeb0 0a68 	vmov.f32	s0, s17
 8003a56:	f000 fb7d 	bl	8004154 <finitef>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d06d      	beq.n	8003b3a <powf+0x246>
 8003a5e:	eeb0 0a48 	vmov.f32	s0, s16
 8003a62:	f000 fb77 	bl	8004154 <finitef>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d067      	beq.n	8003b3a <powf+0x246>
 8003a6a:	ee18 0a90 	vmov	r0, s17
 8003a6e:	f7fc fd0f 	bl	8000490 <__aeabi_f2d>
 8003a72:	4680      	mov	r8, r0
 8003a74:	ee18 0a10 	vmov	r0, s16
 8003a78:	4689      	mov	r9, r1
 8003a7a:	f7fc fd09 	bl	8000490 <__aeabi_f2d>
 8003a7e:	eeb4 9a49 	vcmp.f32	s18, s18
 8003a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a86:	f994 4000 	ldrsb.w	r4, [r4]
 8003a8a:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <powf+0x2ac>)
 8003a8c:	d713      	bvc.n	8003ab6 <powf+0x1c2>
 8003a8e:	2201      	movs	r2, #1
 8003a90:	e9cd 2300 	strd	r2, r3, [sp]
 8003a94:	9508      	str	r5, [sp, #32]
 8003a96:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003a9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a9e:	2c00      	cmp	r4, #0
 8003aa0:	d0c2      	beq.n	8003a28 <powf+0x134>
 8003aa2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8003aa6:	ee17 0a90 	vmov	r0, s15
 8003aaa:	f7fc fcf1 	bl	8000490 <__aeabi_f2d>
 8003aae:	2c02      	cmp	r4, #2
 8003ab0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003ab4:	e7c2      	b.n	8003a3c <powf+0x148>
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003abc:	e9cd 2300 	strd	r2, r3, [sp]
 8003ac0:	9508      	str	r5, [sp, #32]
 8003ac2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003aca:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003ace:	b9fc      	cbnz	r4, 8003b10 <powf+0x21c>
 8003ad0:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <powf+0x2bc>)
 8003ad2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8003ad6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003ae2:	d553      	bpl.n	8003b8c <powf+0x298>
 8003ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8003ae8:	f000 fb44 	bl	8004174 <rintf>
 8003aec:	eeb4 0a48 	vcmp.f32	s0, s16
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af4:	d004      	beq.n	8003b00 <powf+0x20c>
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <powf+0x2c0>)
 8003af8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003afc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b00:	f996 3000 	ldrsb.w	r3, [r6]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d141      	bne.n	8003b8c <powf+0x298>
 8003b08:	f7ff fec2 	bl	8003890 <__errno>
 8003b0c:	2322      	movs	r3, #34	; 0x22
 8003b0e:	e799      	b.n	8003a44 <powf+0x150>
 8003b10:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <powf+0x2c4>)
 8003b12:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8003b16:	2200      	movs	r2, #0
 8003b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b20:	d5ee      	bpl.n	8003b00 <powf+0x20c>
 8003b22:	eeb0 0a48 	vmov.f32	s0, s16
 8003b26:	f000 fb25 	bl	8004174 <rintf>
 8003b2a:	eeb4 0a48 	vcmp.f32	s0, s16
 8003b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b32:	d0e5      	beq.n	8003b00 <powf+0x20c>
 8003b34:	2200      	movs	r2, #0
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <powf+0x2b8>)
 8003b38:	e7e0      	b.n	8003afc <powf+0x208>
 8003b3a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	f47f af4a 	bne.w	80039da <powf+0xe6>
 8003b46:	eeb0 0a68 	vmov.f32	s0, s17
 8003b4a:	f000 fb03 	bl	8004154 <finitef>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	f43f af43 	beq.w	80039da <powf+0xe6>
 8003b54:	eeb0 0a48 	vmov.f32	s0, s16
 8003b58:	f000 fafc 	bl	8004154 <finitef>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	f43f af3c 	beq.w	80039da <powf+0xe6>
 8003b62:	2304      	movs	r3, #4
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <powf+0x2ac>)
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	ee18 0a90 	vmov	r0, s17
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9308      	str	r3, [sp, #32]
 8003b72:	f7fc fc8d 	bl	8000490 <__aeabi_f2d>
 8003b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b7a:	ee18 0a10 	vmov	r0, s16
 8003b7e:	f7fc fc87 	bl	8000490 <__aeabi_f2d>
 8003b82:	2200      	movs	r2, #0
 8003b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e7b7      	b.n	8003afc <powf+0x208>
 8003b8c:	4668      	mov	r0, sp
 8003b8e:	f000 fad8 	bl	8004142 <matherr>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	f47f af15 	bne.w	80039c2 <powf+0xce>
 8003b98:	e7b6      	b.n	8003b08 <powf+0x214>
 8003b9a:	bf00      	nop
 8003b9c:	20000074 	.word	0x20000074
 8003ba0:	08004358 	.word	0x08004358
 8003ba4:	3ff00000 	.word	0x3ff00000
 8003ba8:	00000000 	.word	0x00000000
 8003bac:	fff00000 	.word	0xfff00000
 8003bb0:	47efffff 	.word	0x47efffff
 8003bb4:	c7efffff 	.word	0xc7efffff
 8003bb8:	7ff00000 	.word	0x7ff00000

08003bbc <__ieee754_powf>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	ee10 5a90 	vmov	r5, s1
 8003bc4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8003bc8:	ed2d 8b02 	vpush	{d8}
 8003bcc:	eeb0 8a40 	vmov.f32	s16, s0
 8003bd0:	eef0 8a60 	vmov.f32	s17, s1
 8003bd4:	f000 8293 	beq.w	80040fe <__ieee754_powf+0x542>
 8003bd8:	ee10 8a10 	vmov	r8, s0
 8003bdc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8003be0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003be4:	dc06      	bgt.n	8003bf4 <__ieee754_powf+0x38>
 8003be6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8003bea:	dd0a      	ble.n	8003c02 <__ieee754_powf+0x46>
 8003bec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8003bf0:	f000 8285 	beq.w	80040fe <__ieee754_powf+0x542>
 8003bf4:	ecbd 8b02 	vpop	{d8}
 8003bf8:	48d9      	ldr	r0, [pc, #868]	; (8003f60 <__ieee754_powf+0x3a4>)
 8003bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfe:	f000 bab3 	b.w	8004168 <nanf>
 8003c02:	f1b8 0f00 	cmp.w	r8, #0
 8003c06:	da1d      	bge.n	8003c44 <__ieee754_powf+0x88>
 8003c08:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8003c0c:	da2c      	bge.n	8003c68 <__ieee754_powf+0xac>
 8003c0e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8003c12:	db30      	blt.n	8003c76 <__ieee754_powf+0xba>
 8003c14:	15fb      	asrs	r3, r7, #23
 8003c16:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003c1a:	fa47 f603 	asr.w	r6, r7, r3
 8003c1e:	fa06 f303 	lsl.w	r3, r6, r3
 8003c22:	42bb      	cmp	r3, r7
 8003c24:	d127      	bne.n	8003c76 <__ieee754_powf+0xba>
 8003c26:	f006 0601 	and.w	r6, r6, #1
 8003c2a:	f1c6 0602 	rsb	r6, r6, #2
 8003c2e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8003c32:	d122      	bne.n	8003c7a <__ieee754_powf+0xbe>
 8003c34:	2d00      	cmp	r5, #0
 8003c36:	f280 8268 	bge.w	800410a <__ieee754_powf+0x54e>
 8003c3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003c3e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8003c42:	e00d      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003c44:	2600      	movs	r6, #0
 8003c46:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8003c4a:	d1f0      	bne.n	8003c2e <__ieee754_powf+0x72>
 8003c4c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8003c50:	f000 8255 	beq.w	80040fe <__ieee754_powf+0x542>
 8003c54:	dd0a      	ble.n	8003c6c <__ieee754_powf+0xb0>
 8003c56:	2d00      	cmp	r5, #0
 8003c58:	f280 8254 	bge.w	8004104 <__ieee754_powf+0x548>
 8003c5c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8003f64 <__ieee754_powf+0x3a8>
 8003c60:	ecbd 8b02 	vpop	{d8}
 8003c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c68:	2602      	movs	r6, #2
 8003c6a:	e7ec      	b.n	8003c46 <__ieee754_powf+0x8a>
 8003c6c:	2d00      	cmp	r5, #0
 8003c6e:	daf5      	bge.n	8003c5c <__ieee754_powf+0xa0>
 8003c70:	eeb1 0a68 	vneg.f32	s0, s17
 8003c74:	e7f4      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003c76:	2600      	movs	r6, #0
 8003c78:	e7d9      	b.n	8003c2e <__ieee754_powf+0x72>
 8003c7a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8003c7e:	d102      	bne.n	8003c86 <__ieee754_powf+0xca>
 8003c80:	ee28 0a08 	vmul.f32	s0, s16, s16
 8003c84:	e7ec      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003c86:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8003c8a:	eeb0 0a48 	vmov.f32	s0, s16
 8003c8e:	d108      	bne.n	8003ca2 <__ieee754_powf+0xe6>
 8003c90:	f1b8 0f00 	cmp.w	r8, #0
 8003c94:	db05      	blt.n	8003ca2 <__ieee754_powf+0xe6>
 8003c96:	ecbd 8b02 	vpop	{d8}
 8003c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9e:	f000 ba4d 	b.w	800413c <__ieee754_sqrtf>
 8003ca2:	f000 fa50 	bl	8004146 <fabsf>
 8003ca6:	b124      	cbz	r4, 8003cb2 <__ieee754_powf+0xf6>
 8003ca8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8003cac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8003cb0:	d117      	bne.n	8003ce2 <__ieee754_powf+0x126>
 8003cb2:	2d00      	cmp	r5, #0
 8003cb4:	bfbc      	itt	lt
 8003cb6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8003cba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8003cbe:	f1b8 0f00 	cmp.w	r8, #0
 8003cc2:	dacd      	bge.n	8003c60 <__ieee754_powf+0xa4>
 8003cc4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8003cc8:	ea54 0306 	orrs.w	r3, r4, r6
 8003ccc:	d104      	bne.n	8003cd8 <__ieee754_powf+0x11c>
 8003cce:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003cd2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003cd6:	e7c3      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003cd8:	2e01      	cmp	r6, #1
 8003cda:	d1c1      	bne.n	8003c60 <__ieee754_powf+0xa4>
 8003cdc:	eeb1 0a40 	vneg.f32	s0, s0
 8003ce0:	e7be      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003ce2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8003ce6:	3801      	subs	r0, #1
 8003ce8:	ea56 0300 	orrs.w	r3, r6, r0
 8003cec:	d104      	bne.n	8003cf8 <__ieee754_powf+0x13c>
 8003cee:	ee38 8a48 	vsub.f32	s16, s16, s16
 8003cf2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8003cf6:	e7b3      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003cf8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8003cfc:	dd6d      	ble.n	8003dda <__ieee754_powf+0x21e>
 8003cfe:	4b9a      	ldr	r3, [pc, #616]	; (8003f68 <__ieee754_powf+0x3ac>)
 8003d00:	429c      	cmp	r4, r3
 8003d02:	dc06      	bgt.n	8003d12 <__ieee754_powf+0x156>
 8003d04:	2d00      	cmp	r5, #0
 8003d06:	daa9      	bge.n	8003c5c <__ieee754_powf+0xa0>
 8003d08:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8003f6c <__ieee754_powf+0x3b0>
 8003d0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003d10:	e7a6      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003d12:	4b97      	ldr	r3, [pc, #604]	; (8003f70 <__ieee754_powf+0x3b4>)
 8003d14:	429c      	cmp	r4, r3
 8003d16:	dd02      	ble.n	8003d1e <__ieee754_powf+0x162>
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	dcf5      	bgt.n	8003d08 <__ieee754_powf+0x14c>
 8003d1c:	e79e      	b.n	8003c5c <__ieee754_powf+0xa0>
 8003d1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003d22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003d26:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003f74 <__ieee754_powf+0x3b8>
 8003d2a:	eef1 6a40 	vneg.f32	s13, s0
 8003d2e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8003d32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003d36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003d3a:	eee7 7a40 	vfms.f32	s15, s14, s0
 8003d3e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8003d42:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003f78 <__ieee754_powf+0x3bc>
 8003d46:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8003d4a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8003f7c <__ieee754_powf+0x3c0>
 8003d4e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8003d52:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003d56:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003f80 <__ieee754_powf+0x3c4>
 8003d5a:	eeb0 6a67 	vmov.f32	s12, s15
 8003d5e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8003d62:	ee16 3a10 	vmov	r3, s12
 8003d66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d6a:	f023 030f 	bic.w	r3, r3, #15
 8003d6e:	ee00 3a90 	vmov	s1, r3
 8003d72:	eee6 0a87 	vfma.f32	s1, s13, s14
 8003d76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003d7a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8003d7e:	f025 050f 	bic.w	r5, r5, #15
 8003d82:	ee07 5a10 	vmov	s14, r5
 8003d86:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8003d8a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eee7 0a27 	vfma.f32	s1, s14, s15
 8003d96:	3e01      	subs	r6, #1
 8003d98:	ea56 0200 	orrs.w	r2, r6, r0
 8003d9c:	ee07 5a10 	vmov	s14, r5
 8003da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003da8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8003dac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003db0:	ee17 4a10 	vmov	r4, s14
 8003db4:	bf08      	it	eq
 8003db6:	eeb0 8a40 	vmoveq.f32	s16, s0
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003dc0:	f340 8184 	ble.w	80040cc <__ieee754_powf+0x510>
 8003dc4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8003dc8:	f340 80fc 	ble.w	8003fc4 <__ieee754_powf+0x408>
 8003dcc:	eddf 7a67 	vldr	s15, [pc, #412]	; 8003f6c <__ieee754_powf+0x3b0>
 8003dd0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8003dd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003dd8:	e742      	b.n	8003c60 <__ieee754_powf+0xa4>
 8003dda:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8003dde:	bfbf      	itttt	lt
 8003de0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8003f84 <__ieee754_powf+0x3c8>
 8003de4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8003de8:	f06f 0217 	mvnlt.w	r2, #23
 8003dec:	ee17 4a90 	vmovlt	r4, s15
 8003df0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8003df4:	bfa8      	it	ge
 8003df6:	2200      	movge	r2, #0
 8003df8:	3b7f      	subs	r3, #127	; 0x7f
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4a62      	ldr	r2, [pc, #392]	; (8003f88 <__ieee754_powf+0x3cc>)
 8003dfe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8003e02:	4294      	cmp	r4, r2
 8003e04:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8003e08:	dd06      	ble.n	8003e18 <__ieee754_powf+0x25c>
 8003e0a:	4a60      	ldr	r2, [pc, #384]	; (8003f8c <__ieee754_powf+0x3d0>)
 8003e0c:	4294      	cmp	r4, r2
 8003e0e:	f340 80a5 	ble.w	8003f5c <__ieee754_powf+0x3a0>
 8003e12:	3301      	adds	r3, #1
 8003e14:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8003e18:	2400      	movs	r4, #0
 8003e1a:	4a5d      	ldr	r2, [pc, #372]	; (8003f90 <__ieee754_powf+0x3d4>)
 8003e1c:	00a7      	lsls	r7, r4, #2
 8003e1e:	443a      	add	r2, r7
 8003e20:	ee07 1a90 	vmov	s15, r1
 8003e24:	ed92 7a00 	vldr	s14, [r2]
 8003e28:	4a5a      	ldr	r2, [pc, #360]	; (8003f94 <__ieee754_powf+0x3d8>)
 8003e2a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003e2e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003e32:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8003e36:	1049      	asrs	r1, r1, #1
 8003e38:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8003e3c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8003e40:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8003e44:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8003e48:	ee06 1a10 	vmov	s12, r1
 8003e4c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8003e50:	ee14 ca90 	vmov	ip, s9
 8003e54:	ea02 0c0c 	and.w	ip, r2, ip
 8003e58:	ee05 ca10 	vmov	s10, ip
 8003e5c:	eeb1 4a45 	vneg.f32	s8, s10
 8003e60:	eee4 5a06 	vfma.f32	s11, s8, s12
 8003e64:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003e68:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003f98 <__ieee754_powf+0x3dc>
 8003e6c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8003e70:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8003e74:	eee4 5a06 	vfma.f32	s11, s8, s12
 8003e78:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8003e7c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8003e80:	eddf 5a46 	vldr	s11, [pc, #280]	; 8003f9c <__ieee754_powf+0x3e0>
 8003e84:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8003e88:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003fa0 <__ieee754_powf+0x3e4>
 8003e8c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8003e90:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003f74 <__ieee754_powf+0x3b8>
 8003e94:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8003e98:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003fa4 <__ieee754_powf+0x3e8>
 8003e9c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8003ea0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003fa8 <__ieee754_powf+0x3ec>
 8003ea4:	ee75 6a24 	vadd.f32	s13, s10, s9
 8003ea8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8003eac:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003eb0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8003eb4:	eef0 7a65 	vmov.f32	s15, s11
 8003eb8:	eee3 6a87 	vfma.f32	s13, s7, s14
 8003ebc:	eee5 7a05 	vfma.f32	s15, s10, s10
 8003ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ec4:	ee17 1a90 	vmov	r1, s15
 8003ec8:	4011      	ands	r1, r2
 8003eca:	ee07 1a90 	vmov	s15, r1
 8003ece:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8003ed2:	eddf 5a36 	vldr	s11, [pc, #216]	; 8003fac <__ieee754_powf+0x3f0>
 8003ed6:	eea4 7a05 	vfma.f32	s14, s8, s10
 8003eda:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003ede:	ee27 7a24 	vmul.f32	s14, s14, s9
 8003ee2:	eea7 7a86 	vfma.f32	s14, s15, s12
 8003ee6:	eeb0 6a47 	vmov.f32	s12, s14
 8003eea:	eea5 6a27 	vfma.f32	s12, s10, s15
 8003eee:	ee16 1a10 	vmov	r1, s12
 8003ef2:	4011      	ands	r1, r2
 8003ef4:	ee06 1a90 	vmov	s13, r1
 8003ef8:	eee4 6a27 	vfma.f32	s13, s8, s15
 8003efc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8003fb0 <__ieee754_powf+0x3f4>
 8003f00:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003f04:	ee06 1a10 	vmov	s12, r1
 8003f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f0c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003fb4 <__ieee754_powf+0x3f8>
 8003f10:	4929      	ldr	r1, [pc, #164]	; (8003fb8 <__ieee754_powf+0x3fc>)
 8003f12:	eea6 7a27 	vfma.f32	s14, s12, s15
 8003f16:	4439      	add	r1, r7
 8003f18:	edd1 7a00 	vldr	s15, [r1]
 8003f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f20:	ee07 3a90 	vmov	s15, r3
 8003f24:	eef0 0a47 	vmov.f32	s1, s14
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <__ieee754_powf+0x400>)
 8003f2a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8003f2e:	443b      	add	r3, r7
 8003f30:	ed93 5a00 	vldr	s10, [r3]
 8003f34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f38:	ee70 0a85 	vadd.f32	s1, s1, s10
 8003f3c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8003f40:	ee17 3a90 	vmov	r3, s15
 8003f44:	4013      	ands	r3, r2
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f4e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003f52:	eee6 7a65 	vfms.f32	s15, s12, s11
 8003f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f5a:	e70e      	b.n	8003d7a <__ieee754_powf+0x1be>
 8003f5c:	2401      	movs	r4, #1
 8003f5e:	e75c      	b.n	8003e1a <__ieee754_powf+0x25e>
 8003f60:	0800435c 	.word	0x0800435c
 8003f64:	00000000 	.word	0x00000000
 8003f68:	3f7ffff7 	.word	0x3f7ffff7
 8003f6c:	7149f2ca 	.word	0x7149f2ca
 8003f70:	3f800007 	.word	0x3f800007
 8003f74:	3eaaaaab 	.word	0x3eaaaaab
 8003f78:	36eca570 	.word	0x36eca570
 8003f7c:	3fb8aa3b 	.word	0x3fb8aa3b
 8003f80:	3fb8aa00 	.word	0x3fb8aa00
 8003f84:	4b800000 	.word	0x4b800000
 8003f88:	001cc471 	.word	0x001cc471
 8003f8c:	005db3d6 	.word	0x005db3d6
 8003f90:	08004360 	.word	0x08004360
 8003f94:	fffff000 	.word	0xfffff000
 8003f98:	3e6c3255 	.word	0x3e6c3255
 8003f9c:	3e53f142 	.word	0x3e53f142
 8003fa0:	3e8ba305 	.word	0x3e8ba305
 8003fa4:	3edb6db7 	.word	0x3edb6db7
 8003fa8:	3f19999a 	.word	0x3f19999a
 8003fac:	3f763800 	.word	0x3f763800
 8003fb0:	3f76384f 	.word	0x3f76384f
 8003fb4:	369dc3a0 	.word	0x369dc3a0
 8003fb8:	08004370 	.word	0x08004370
 8003fbc:	08004368 	.word	0x08004368
 8003fc0:	3338aa3c 	.word	0x3338aa3c
 8003fc4:	f040 8092 	bne.w	80040ec <__ieee754_powf+0x530>
 8003fc8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003fc0 <__ieee754_powf+0x404>
 8003fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fd0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8003fd4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fdc:	f73f aef6 	bgt.w	8003dcc <__ieee754_powf+0x210>
 8003fe0:	15db      	asrs	r3, r3, #23
 8003fe2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8003fe6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003fea:	4103      	asrs	r3, r0
 8003fec:	4423      	add	r3, r4
 8003fee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003ff2:	4947      	ldr	r1, [pc, #284]	; (8004110 <__ieee754_powf+0x554>)
 8003ff4:	3a7f      	subs	r2, #127	; 0x7f
 8003ff6:	4111      	asrs	r1, r2
 8003ff8:	ea23 0101 	bic.w	r1, r3, r1
 8003ffc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8004000:	ee07 1a10 	vmov	s14, r1
 8004004:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004008:	f1c2 0217 	rsb	r2, r2, #23
 800400c:	4110      	asrs	r0, r2
 800400e:	2c00      	cmp	r4, #0
 8004010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004014:	bfb8      	it	lt
 8004016:	4240      	neglt	r0, r0
 8004018:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800401c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004114 <__ieee754_powf+0x558>
 8004020:	ee17 3a10 	vmov	r3, s14
 8004024:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004028:	f023 030f 	bic.w	r3, r3, #15
 800402c:	ee07 3a10 	vmov	s14, r3
 8004030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004034:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004038:	eddf 7a37 	vldr	s15, [pc, #220]	; 8004118 <__ieee754_powf+0x55c>
 800403c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004040:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004044:	eddf 6a35 	vldr	s13, [pc, #212]	; 800411c <__ieee754_powf+0x560>
 8004048:	eeb0 0a67 	vmov.f32	s0, s15
 800404c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8004050:	eeb0 6a40 	vmov.f32	s12, s0
 8004054:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004058:	ee20 7a00 	vmul.f32	s14, s0, s0
 800405c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004060:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004120 <__ieee754_powf+0x564>
 8004064:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004124 <__ieee754_powf+0x568>
 8004068:	eea7 6a26 	vfma.f32	s12, s14, s13
 800406c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8004128 <__ieee754_powf+0x56c>
 8004070:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004074:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800412c <__ieee754_powf+0x570>
 8004078:	eea6 6a87 	vfma.f32	s12, s13, s14
 800407c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004130 <__ieee754_powf+0x574>
 8004080:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004084:	eeb0 6a40 	vmov.f32	s12, s0
 8004088:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800408c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004090:	eeb0 7a46 	vmov.f32	s14, s12
 8004094:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004098:	ee20 6a06 	vmul.f32	s12, s0, s12
 800409c:	eee0 7a27 	vfma.f32	s15, s0, s15
 80040a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80040a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80040ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80040b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80040b4:	ee10 3a10 	vmov	r3, s0
 80040b8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80040bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c0:	da1a      	bge.n	80040f8 <__ieee754_powf+0x53c>
 80040c2:	f000 f8b1 	bl	8004228 <scalbnf>
 80040c6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80040ca:	e5c9      	b.n	8003c60 <__ieee754_powf+0xa4>
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <__ieee754_powf+0x578>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	dd02      	ble.n	80040d8 <__ieee754_powf+0x51c>
 80040d2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004138 <__ieee754_powf+0x57c>
 80040d6:	e67b      	b.n	8003dd0 <__ieee754_powf+0x214>
 80040d8:	d108      	bne.n	80040ec <__ieee754_powf+0x530>
 80040da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040de:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80040e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e6:	f6ff af7b 	blt.w	8003fe0 <__ieee754_powf+0x424>
 80040ea:	e7f2      	b.n	80040d2 <__ieee754_powf+0x516>
 80040ec:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80040f0:	f73f af76 	bgt.w	8003fe0 <__ieee754_powf+0x424>
 80040f4:	2000      	movs	r0, #0
 80040f6:	e78f      	b.n	8004018 <__ieee754_powf+0x45c>
 80040f8:	ee00 3a10 	vmov	s0, r3
 80040fc:	e7e3      	b.n	80040c6 <__ieee754_powf+0x50a>
 80040fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004102:	e5ad      	b.n	8003c60 <__ieee754_powf+0xa4>
 8004104:	eeb0 0a68 	vmov.f32	s0, s17
 8004108:	e5aa      	b.n	8003c60 <__ieee754_powf+0xa4>
 800410a:	eeb0 0a48 	vmov.f32	s0, s16
 800410e:	e5a7      	b.n	8003c60 <__ieee754_powf+0xa4>
 8004110:	007fffff 	.word	0x007fffff
 8004114:	3f317218 	.word	0x3f317218
 8004118:	35bfbe8c 	.word	0x35bfbe8c
 800411c:	3f317200 	.word	0x3f317200
 8004120:	3331bb4c 	.word	0x3331bb4c
 8004124:	b5ddea0e 	.word	0xb5ddea0e
 8004128:	388ab355 	.word	0x388ab355
 800412c:	bb360b61 	.word	0xbb360b61
 8004130:	3e2aaaab 	.word	0x3e2aaaab
 8004134:	43160000 	.word	0x43160000
 8004138:	0da24260 	.word	0x0da24260

0800413c <__ieee754_sqrtf>:
 800413c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004140:	4770      	bx	lr

08004142 <matherr>:
 8004142:	2000      	movs	r0, #0
 8004144:	4770      	bx	lr

08004146 <fabsf>:
 8004146:	ee10 3a10 	vmov	r3, s0
 800414a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800414e:	ee00 3a10 	vmov	s0, r3
 8004152:	4770      	bx	lr

08004154 <finitef>:
 8004154:	ee10 3a10 	vmov	r3, s0
 8004158:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800415c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004160:	bfac      	ite	ge
 8004162:	2000      	movge	r0, #0
 8004164:	2001      	movlt	r0, #1
 8004166:	4770      	bx	lr

08004168 <nanf>:
 8004168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004170 <nanf+0x8>
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	7fc00000 	.word	0x7fc00000

08004174 <rintf>:
 8004174:	b513      	push	{r0, r1, r4, lr}
 8004176:	ee10 1a10 	vmov	r1, s0
 800417a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800417e:	0ddc      	lsrs	r4, r3, #23
 8004180:	3c7f      	subs	r4, #127	; 0x7f
 8004182:	2c16      	cmp	r4, #22
 8004184:	dc46      	bgt.n	8004214 <rintf+0xa0>
 8004186:	b32b      	cbz	r3, 80041d4 <rintf+0x60>
 8004188:	2c00      	cmp	r4, #0
 800418a:	ee10 2a10 	vmov	r2, s0
 800418e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8004192:	da21      	bge.n	80041d8 <rintf+0x64>
 8004194:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8004198:	425b      	negs	r3, r3
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <rintf+0xac>)
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	0d09      	lsrs	r1, r1, #20
 80041a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a4:	0509      	lsls	r1, r1, #20
 80041a6:	430b      	orrs	r3, r1
 80041a8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	edd2 6a00 	vldr	s13, [r2]
 80041b4:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80041b8:	ed8d 7a01 	vstr	s14, [sp, #4]
 80041bc:	eddd 7a01 	vldr	s15, [sp, #4]
 80041c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80041c4:	ee17 3a90 	vmov	r3, s15
 80041c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041cc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80041d0:	ee00 3a10 	vmov	s0, r3
 80041d4:	b002      	add	sp, #8
 80041d6:	bd10      	pop	{r4, pc}
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <rintf+0xb0>)
 80041da:	4123      	asrs	r3, r4
 80041dc:	4219      	tst	r1, r3
 80041de:	d0f9      	beq.n	80041d4 <rintf+0x60>
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	4219      	tst	r1, r3
 80041e4:	d006      	beq.n	80041f4 <rintf+0x80>
 80041e6:	ea21 0203 	bic.w	r2, r1, r3
 80041ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041ee:	fa43 f404 	asr.w	r4, r3, r4
 80041f2:	4322      	orrs	r2, r4
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <rintf+0xac>)
 80041f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80041fa:	ed90 7a00 	vldr	s14, [r0]
 80041fe:	ee07 2a90 	vmov	s15, r2
 8004202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004206:	edcd 7a01 	vstr	s15, [sp, #4]
 800420a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800420e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004212:	e7df      	b.n	80041d4 <rintf+0x60>
 8004214:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004218:	d3dc      	bcc.n	80041d4 <rintf+0x60>
 800421a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800421e:	e7d9      	b.n	80041d4 <rintf+0x60>
 8004220:	08004378 	.word	0x08004378
 8004224:	007fffff 	.word	0x007fffff

08004228 <scalbnf>:
 8004228:	b508      	push	{r3, lr}
 800422a:	ee10 2a10 	vmov	r2, s0
 800422e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004232:	ed2d 8b02 	vpush	{d8}
 8004236:	eef0 0a40 	vmov.f32	s1, s0
 800423a:	d004      	beq.n	8004246 <scalbnf+0x1e>
 800423c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004240:	d306      	bcc.n	8004250 <scalbnf+0x28>
 8004242:	ee70 0a00 	vadd.f32	s1, s0, s0
 8004246:	ecbd 8b02 	vpop	{d8}
 800424a:	eeb0 0a60 	vmov.f32	s0, s1
 800424e:	bd08      	pop	{r3, pc}
 8004250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004254:	d21c      	bcs.n	8004290 <scalbnf+0x68>
 8004256:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <scalbnf+0xac>)
 8004258:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80042d8 <scalbnf+0xb0>
 800425c:	4298      	cmp	r0, r3
 800425e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8004262:	db10      	blt.n	8004286 <scalbnf+0x5e>
 8004264:	ee10 2a90 	vmov	r2, s1
 8004268:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800426c:	3b19      	subs	r3, #25
 800426e:	4403      	add	r3, r0
 8004270:	2bfe      	cmp	r3, #254	; 0xfe
 8004272:	dd0f      	ble.n	8004294 <scalbnf+0x6c>
 8004274:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80042dc <scalbnf+0xb4>
 8004278:	eeb0 0a48 	vmov.f32	s0, s16
 800427c:	f000 f834 	bl	80042e8 <copysignf>
 8004280:	ee60 0a08 	vmul.f32	s1, s0, s16
 8004284:	e7df      	b.n	8004246 <scalbnf+0x1e>
 8004286:	eddf 7a16 	vldr	s15, [pc, #88]	; 80042e0 <scalbnf+0xb8>
 800428a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800428e:	e7da      	b.n	8004246 <scalbnf+0x1e>
 8004290:	0ddb      	lsrs	r3, r3, #23
 8004292:	e7ec      	b.n	800426e <scalbnf+0x46>
 8004294:	2b00      	cmp	r3, #0
 8004296:	dd06      	ble.n	80042a6 <scalbnf+0x7e>
 8004298:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800429c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80042a0:	ee00 3a90 	vmov	s1, r3
 80042a4:	e7cf      	b.n	8004246 <scalbnf+0x1e>
 80042a6:	f113 0f16 	cmn.w	r3, #22
 80042aa:	da06      	bge.n	80042ba <scalbnf+0x92>
 80042ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80042b0:	4298      	cmp	r0, r3
 80042b2:	dcdf      	bgt.n	8004274 <scalbnf+0x4c>
 80042b4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80042e0 <scalbnf+0xb8>
 80042b8:	e7de      	b.n	8004278 <scalbnf+0x50>
 80042ba:	3319      	adds	r3, #25
 80042bc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80042c0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80042c4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80042e4 <scalbnf+0xbc>
 80042c8:	ee07 3a10 	vmov	s14, r3
 80042cc:	ee67 0a27 	vmul.f32	s1, s14, s15
 80042d0:	e7b9      	b.n	8004246 <scalbnf+0x1e>
 80042d2:	bf00      	nop
 80042d4:	ffff3cb0 	.word	0xffff3cb0
 80042d8:	4c000000 	.word	0x4c000000
 80042dc:	7149f2ca 	.word	0x7149f2ca
 80042e0:	0da24260 	.word	0x0da24260
 80042e4:	33000000 	.word	0x33000000

080042e8 <copysignf>:
 80042e8:	ee10 3a10 	vmov	r3, s0
 80042ec:	ee10 2a90 	vmov	r2, s1
 80042f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042f8:	4313      	orrs	r3, r2
 80042fa:	ee00 3a10 	vmov	s0, r3
 80042fe:	4770      	bx	lr

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
